<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T09:41:18.510Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.22/"/>
    <id>http://yoursite.com/2019/09/12/8.22/</id>
    <published>2019-09-12T05:41:34.836Z</published>
    <updated>2019-08-22T09:41:18.510Z</updated>
    
    <content type="html"><![CDATA[<p>POJ2104（不带修）整体二分模板题</p><p>HDU5412 (带修）整体二分</p><p>BZOJ4293</p><p>BZOJ1023</p><p>BZO4316</p><p>BZOJ2125</p><p>BZoj3196</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;POJ2104（不带修）整体二分模板题&lt;/p&gt;
&lt;p&gt;HDU5412 (带修）整体二分&lt;/p&gt;
&lt;p&gt;BZOJ4293&lt;/p&gt;
&lt;p&gt;BZOJ1023&lt;/p&gt;
&lt;p&gt;BZO4316&lt;/p&gt;
&lt;p&gt;BZOJ2125&lt;/p&gt;
&lt;p&gt;BZoj3196&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.21/"/>
    <id>http://yoursite.com/2019/09/12/8.21/</id>
    <published>2019-09-12T05:41:34.826Z</published>
    <updated>2019-08-21T03:17:22.440Z</updated>
    
    <content type="html"><![CDATA[<p>###BZOJ1103</p><p>树链剖分，将边权转为点权，比如边(x,y)，将其边权存到深度大的点上</p><p>本题查询的是1到y，如果要查询x到y，只要找x到y的点权和然后减去他们lca的点权即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###BZOJ1103&lt;/p&gt;
&lt;p&gt;树链剖分，将边权转为点权，比如边(x,y)，将其边权存到深度大的点上&lt;/p&gt;
&lt;p&gt;本题查询的是1到y，如果要查询x到y，只要找x到y的点权和然后减去他们lca的点权即可&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.18/"/>
    <id>http://yoursite.com/2019/09/12/8.18/</id>
    <published>2019-09-12T05:41:34.826Z</published>
    <updated>2019-08-19T08:14:02.428Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P4602主席树-二分"><a href="#P4602主席树-二分" class="headerlink" title="P4602主席树+二分"></a>P4602主席树+二分</h3><p>对d排序，按d的顺序插入果汁，维护价格和数量</p><p>对于每个小孩，二分d，在主席树中取最便宜的使总数足够，判断价格</p><p>第七组一直没过，肯定是数据有问题，不管了</p><h3 id="P3402可持续并查集"><a href="#P3402可持续并查集" class="headerlink" title="P3402可持续并查集"></a>P3402可持续并查集</h3><p>裸题</p><p>###BZOJ2588 lca+主席树</p><p>讲权值离散化</p><p>用主席树存权值</p><p>对于每一个点，就存从根结点到他路径上的权值线段树，用主席树来存的话就是从其父亲转化过来就好了，即从父亲主席树更新它自己的节点</p><p>则对于查询u到v的第k小，就是T[u]+T[v]-T[lca(u,v)]-T[fa[lca[(u,v)]]]中的第k小</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;P4602主席树-二分&quot;&gt;&lt;a href=&quot;#P4602主席树-二分&quot; class=&quot;headerlink&quot; title=&quot;P4602主席树+二分&quot;&gt;&lt;/a&gt;P4602主席树+二分&lt;/h3&gt;&lt;p&gt;对d排序，按d的顺序插入果汁，维护价格和数量&lt;/p&gt;
&lt;p&gt;对于每个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.14/"/>
    <id>http://yoursite.com/2019/09/12/8.14/</id>
    <published>2019-09-12T05:41:34.826Z</published>
    <updated>2019-08-14T15:17:25.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="luogu-P3690"><a href="#luogu-P3690" class="headerlink" title="luogu P3690"></a>luogu P3690</h2><h2 id="hdu1695"><a href="#hdu1695" class="headerlink" title="hdu1695"></a>hdu1695</h2><p>##bzoj2440</p><p>r=n*10时会运行错误，不知道为什么</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;luogu-P3690&quot;&gt;&lt;a href=&quot;#luogu-P3690&quot; class=&quot;headerlink&quot; title=&quot;luogu P3690&quot;&gt;&lt;/a&gt;luogu P3690&lt;/h2&gt;&lt;h2 id=&quot;hdu1695&quot;&gt;&lt;a href=&quot;#hdu1695&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.19/"/>
    <id>http://yoursite.com/2019/09/12/8.19/</id>
    <published>2019-09-12T05:41:34.826Z</published>
    <updated>2019-08-19T11:43:15.448Z</updated>
    
    <content type="html"><![CDATA[<p>BZOJ3626</p><p>HDU2665</p><p>主席树模板题</p><p>本来是这样的，但是这题实际上是输出第k小，傻逼出题人</p><p>BZOJ1832/1787</p><p>心态真的炸，就求lca</p><p>树上找一个点，使三个点到这个点的距离之和最短</p><p>两两找lca，得到三个点，其中两个相同，第三个特异独行的就是要求的点了，画图就可以验证了</p><p>不知道为什么，我的代码一直T，后来把fa[N][64]改成fa[N][20]就过了，迷的一批</p><p>我觉得可能使内存超了导致出了bug，因为这道题时限是10s，我后来ac的程序跑了6s，但是T的程序交上去基本编译完就出结果了，体感时间很短，所以必不可能是因为跑了10s，大概是内存超限引起的bug，下次注意。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BZOJ3626&lt;/p&gt;
&lt;p&gt;HDU2665&lt;/p&gt;
&lt;p&gt;主席树模板题&lt;/p&gt;
&lt;p&gt;本来是这样的，但是这题实际上是输出第k小，傻逼出题人&lt;/p&gt;
&lt;p&gt;BZOJ1832/1787&lt;/p&gt;
&lt;p&gt;心态真的炸，就求lca&lt;/p&gt;
&lt;p&gt;树上找一个点，使三个点到这个点的距离
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.15/"/>
    <id>http://yoursite.com/2019/09/12/8.15/</id>
    <published>2019-09-12T05:41:34.826Z</published>
    <updated>2019-08-16T01:17:57.204Z</updated>
    
    <content type="html"><![CDATA[<p>bzoj2301莫比乌斯反演</p><p>bzoj2820莫比乌斯反演</p><p>$\sum^{min(n,m)}<em>{p=1}\sum</em>{d|p\and isprime(d)}\mu(\frac{p}{d})\lfloor\frac{n}{p}\rfloor\lfloor\frac{m}{p}\rfloor$</p><p>对于解密方，首先可以求的 w 关于 m 的逆元 $w^{-1}$。</p><p>然后我们可以将得到的密文乘以 $w^{-1}$ 即可得到明文，这是因为</p><p>$$\sum_{i=1}^{i=n}w^{-1}b_iv<em>i \bmod m=\sum</em>{i=1}^{i=n}a_iv_i \bmod m$$</p><p>这里有</p><p>$$b_i \equiv w a_i \bmod m$$</p><p>对于每一块的加密的消息都是小于 m 的，所以求得结果自然也就是明文了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;bzoj2301莫比乌斯反演&lt;/p&gt;
&lt;p&gt;bzoj2820莫比乌斯反演&lt;/p&gt;
&lt;p&gt;$\sum^{min(n,m)}&lt;em&gt;{p=1}\sum&lt;/em&gt;{d|p\and isprime(d)}\mu(\frac{p}{d})\lfloor\frac{n}{p}\rflo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.16/"/>
    <id>http://yoursite.com/2019/09/12/8.16/</id>
    <published>2019-09-12T05:41:34.826Z</published>
    <updated>2019-08-16T11:05:01.919Z</updated>
    
    <content type="html"><![CDATA[<p>P1447[NOI2010] </p><p><em>1</em></p><p><strong>12</strong></p><p><del>w</del></p><p><u>asd</u></p><p>==1==    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;P1447[NOI2010] &lt;/p&gt;
&lt;p&gt;&lt;em&gt;1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;w&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;asd&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;==1==    &lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.12and13/"/>
    <id>http://yoursite.com/2019/09/12/8.12and13/</id>
    <published>2019-09-12T05:41:34.786Z</published>
    <updated>2019-08-13T09:19:10.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再战LCT"><a href="#再战LCT" class="headerlink" title="再战LCT"></a>再战LCT</h1><p>lct其实就是splay plus，它也有时被称为长链剖分，树链剖分使用线段树来维护每条链上的信息，lct用splay来维护链上信息</p><p>因为splay的各种操作，使LCT拥有了许多牛逼的操作</p><p>下面介绍一些概念</p><ul><li>preferred path：和树链剖分的重链对应，但是preferred path是可以选择的，所有路径都可以是preferred -           -                             path，每条preferred path都用splay存，就可以保证在splay中操作复杂度为log</li><li>实树和虚树：实树指的是原来的树，虚树指的是维护每条preferred path所建的splay，实树可能不止一颗</li><li>splay中点的排序是按照圣都来排的，和点权无关</li></ul><h2 id="1-access（x）核心操作"><a href="#1-access（x）核心操作" class="headerlink" title="1.access（x）核心操作"></a>1.access（x）核心操作</h2><p>取出x到实树树根路径上的所有节点，并存在一个splay中，其实就是将x到实树根的路径变为preferred path</p><h2 id="2-find-root-x-找根"><a href="#2-find-root-x-找根" class="headerlink" title="2.find_root(x) 找根"></a>2.find_root(x) 找根</h2><p>找到x在实树上的树根</p><h2 id="3-make-root-x"><a href="#3-make-root-x" class="headerlink" title="3.make_root(x)"></a>3.make_root(x)</h2><p>将x变为其所在实树的根</p><h2 id="4-link-x-y"><a href="#4-link-x-y" class="headerlink" title="4.link(x,y)"></a>4.link(x,y)</h2><p>连接x,y</p><h2 id="5-cut-x-y"><a href="#5-cut-x-y" class="headerlink" title="5.cut(x,y)"></a>5.cut(x,y)</h2><p>断开x，y</p><h2 id="6-modify-x-y-val"><a href="#6-modify-x-y-val" class="headerlink" title="6.modify(x,y,val)"></a>6.modify(x,y,val)</h2><p>在x到y的路径上每个点的点权都加上val</p><h2 id="7-query-x-y"><a href="#7-query-x-y" class="headerlink" title="7.query(x,y)"></a>7.query(x,y)</h2><p> 询问路径(x,y)上的最大点权</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h3 id="hdu4010-检测模板对不对题"><a href="#hdu4010-检测模板对不对题" class="headerlink" title="hdu4010(检测模板对不对题)"></a>hdu4010(检测模板对不对题)</h3><p>###luoguP3690</p><p>刷题记录</p><p>codeforce：1200A</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;再战LCT&quot;&gt;&lt;a href=&quot;#再战LCT&quot; class=&quot;headerlink&quot; title=&quot;再战LCT&quot;&gt;&lt;/a&gt;再战LCT&lt;/h1&gt;&lt;p&gt;lct其实就是splay plus，它也有时被称为长链剖分，树链剖分使用线段树来维护每条链上的信息，lct用spla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.11/"/>
    <id>http://yoursite.com/2019/09/12/8.11/</id>
    <published>2019-09-12T05:41:34.776Z</published>
    <updated>2019-08-11T07:05:47.848Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/8.9/"/>
    <id>http://yoursite.com/2019/09/12/8.9/</id>
    <published>2019-09-12T05:41:34.716Z</published>
    <updated>2019-08-09T07:36:33.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3><p>一个比较好的解释：</p><p>设数集 S 的值域范围为[1,2n−1] T 是 S 的线性基 T={t1,t2,t3,…,tn}（ tx 的最高位的 1 在第 x 位） </p><p>T 中元素互相异或所形成的集合，等价于原数集 S 的元素互相异或形成的集合简单点，可以理解为将原数集进行了压缩</p><p>总所周知，只要两个基向量(0,1)(1,0)就能表示二维空间里的所有向量</p><p>对于数组S，他的任意子序列异或起来的值构成一个新集合SB，显然这个集合的元素很多很多，直接用数组存不太好，于是我们也希望能给他搞几个“基”，然后通过异或这些基来得到SB中的每一个元素，于是就有了线性基。这时候可能就有人问了，那直接用原数组S不就好了嘛，主要还是因为线性基好计算，方便进行各种骚操作。</p><h3 id="构造线性基"><a href="#构造线性基" class="headerlink" title="构造线性基"></a>构造线性基</h3><p>依次插入数，从位数的高到低插入 如果该位无元素(0)，将目前元素放进去 如果改为有元素，异或后处理更低一位 </p><p>比如101 111 11(二进制表示)</p><p>第一次101插进去 s[3]=101</p><p>第二次111插进去，111最高为为3，但是s[3]已经名花有主了，所以111^101 = 10 ，s[2]=10</p><blockquote><p>机智的你们肯定发现了，只要这样处理下去，判断到第i位，大于第i位的数字都为0，如果所有位都有数字的话，若最高位为第n位，所能表示的最大数字位$2^n$,因为每一位异或都能想办法使当前位变为1，最终使所有位都变成1</p></blockquote><p>第三次插11，11^s[3]^s[2]=0,所以就什么都不用干了（即现有的线性基能表示11）</p><blockquote><p>论如何保证线性基span出来的空间和原数组span出来的空间是相同的，很明显啊 因为n^n =0，0^n=n,所以线性基异或出来的数相当于是原数组子集异或出来的</p></blockquote><p>这里保证了线性基是线性无关的。</p><p>学过线代的大家就能明白线性基的原理了（什么？你没学过线代，那就快去学叭）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[N];<span class="comment">//原函数</span></div><div class="line"><span class="keyword">int</span> r[<span class="number">32</span>];<span class="comment">//线性基 </span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">    <span class="keyword">if</span>(x&gt;&gt;i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!r[i])</div><div class="line">            &#123;</div><div class="line">                r[i] = x;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            x ^= r[i];</div><div class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基础应用</p><p>异或最大值：贪心从高到低贪心选择或不选择 </p><p>异或最小值：贪心从低到高位选择第一个非空元素 </p><p>异或判特值：贪心处理直到为0</p><p>异或个数：因为每个元素都是处理出来相对独立的，答案为2$^{集合个数} $</p><p>异或K小值：$2^i$小值就是第i−1个元素贪心地与前面处理的结果，然后对K拆位处理 </p><p>线性基合并：暴力插入即可(相当于把v1的线性基加到v2数组中)</p><p>引理：<strong><em>若V1，V2是线性空间，B1，B2分别是他们的一组基，令W=B2∩V1，若B1∪（B2\W)线性无关，则W是V1∩V2的一组基</em></strong></p><p> 证明：</p><p>若v∈V1∩V2，则v可同时呗B1和B2表示出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线性基&quot;&gt;&lt;a href=&quot;#线性基&quot; class=&quot;headerlink&quot; title=&quot;线性基&quot;&gt;&lt;/a&gt;线性基&lt;/h3&gt;&lt;p&gt;一个比较好的解释：&lt;/p&gt;
&lt;p&gt;设数集 S 的值域范围为[1,2n−1] T 是 S 的线性基 T={t1,t2,t3,…,tn}
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/12/%E5%90%8E%E7%BC%80/"/>
    <id>http://yoursite.com/2019/09/12/后缀/</id>
    <published>2019-09-12T05:41:34.706Z</published>
    <updated>2019-08-07T11:31:32.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="陈立杰后缀自动机讲稿笔记"><a href="#陈立杰后缀自动机讲稿笔记" class="headerlink" title="陈立杰后缀自动机讲稿笔记"></a>陈立杰后缀自动机讲稿笔记</h1><p>trans(s,ch) 当前状态为s，读入<strong><em>字符</em></strong>ch之后，所达到的状态</p><p>Cur = trans(s,str)</p><p>Reg(A)：自动机A能识别的字符串（从init开始识别到end）</p><p>Reg(s):从状态s开始能识别的字符串（s开始识别到end）</p><p>后缀自动机（suffix automaton/SAM）</p><p>定义：能识别S的所有后缀的自动机</p><p>SAM(x) =true 时，当且仅当x为S的后缀，后缀自动机也能用来识别S的所有子串</p><p>ST(str)表示trans(init,str)</p><p>suf为母串S的后缀集合</p><p>Fac为母串S的连续子串集合</p><p>从位置a开始的后缀为Suffix(a) </p><p>S[l,r)表示S中[l,r)这个区间构成的子串，下标从0开始。</p><p>a在S中的[l,r)位置出现 （这里的a是一个字符串，[l,r)可能不止一个） </p><p>计在母串S中a的后一个字符位置为$r_n$</p><p>Reg(ST(a))={$Suffix(r_1),Suffix(r_2),…,Suffix(r_n)$}</p><p>令Right(a)=${r_1,r_2,…,r_n}$,那么Reg(ST(a))就完全由Right(a)决定</p><p>一个状态s，由所有RIght集合是Right(s)的字符串组成</p><p>令r∈Right(s)，只要给定子串长度len，该子串就是S[r-len,r].</p><p>所有确定Right集合后，在给出一个长度就可以确定子串了</p><p>令s的区间为[Min(s),Max(s)]？？？？？</p><h1 id="要不换个博客来看看？"><a href="#要不换个博客来看看？" class="headerlink" title="要不换个博客来看看？"></a>要不换个博客来看看？</h1><p><del>学你🐎的理论，实践出真知</del></p><p><a href="https://www.luogu.org/blog/Kesdiael3/hou-zhui-zi-dong-ji-yang-xie" target="_blank" rel="external">链接</a></p><p>后缀自动机的性质（在该博客里用endpos表示Right<strong>集合</strong>，我觉得挺有道理的）</p><ul><li>如果两个子串的endpos相同，则其中子串一个必然为另一个的后缀</li><li>对任意两个子串t和p($len_t &lt;= len_p$),要么endpos(p)属于endpos(t),要么endpos(t) ∩ endpos(s) = $\varnothing $</li><li>对于endpos相同的子串，归为一个endpos等价类。对于任意一个等价类，将包含在其中的所以子串按长度从大到小排序，每个子串的长度均为上一个子串的长度减一，且为上一个子串的后缀</li><li>endpos等价类个数的级别为O(n)</li><li>一个类a中，由最长的子串，也有最短的子串，我们称最长子串的长度为len(a),最短子串长度为minlen(a)。 对于存在父子关系的两个类，设fa(a)表示类a的父亲(也是一个类)。则：len(fa(a))+1 = minlen(a)</li></ul><p>直接开始用叭(<del>学个机霸</del>）</p><p>1.insert</p><p>sam的构造是不断地向已经建好地sam中加入新地节点。last表示上一个被插入的节点，cnt表示sam中的节点数量，一开始只有一个起点的初始sam。last = cnt = 1；</p><p>接下来，假设要往sam里加入一个字符x</p><ul><li>新建节点np = ++cnt。新建节点，p=last，last=np </li><li>如果不存在ch[p][x] ,令ch[p][x] =np,p=fa[p]。重复此步骤</li></ul><blockquote><p>往上找找到第一个拥有x儿子的节点</p></blockquote><ul><li>如果到最后一个p都没有拥有儿子x，令fa[np]=1。退出过程。</li></ul><blockquote><p>如果都往上走都没有，则这个节点的父节点为初始点1</p></blockquote><ul><li>当ch[p][x]出现时,令q=ch[p][x]。如果len[q]==len[p]+1,令fa[np] = q。退出过程</li></ul><blockquote><p>如果满足这个条件，则np的父亲就为p</p></blockquote><ul><li><p>否则新建节点nq = ++cnt,将q的儿子都复制给nq，令len[nq] = len[p]+1。</p></li><li><p>令fa[nq] = fa[q],fa[q]=fa[np]=nq.</p></li><li>从p开始沿着后缀链接（p=fa[p]），将所有ch[p][x]==q的节点的ch[p][x]都替换成nq</li></ul><blockquote><p>p的儿子为q</p><p>新建一个节点nq，将q的儿子都复制给nq</p><p>nq的父节点设为p，np和q的父节点设为q</p><p>沿后缀链接将所有ch[px][x]==q的节点改为等于nq</p><p>相当于nq抢走了q的一切，而且让q和np认他为父亲，简直是杀人诛心</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> np = ++cnt,p=last;</div><div class="line">    len[np]=len[p]+<span class="number">1</span>,last = np;</div><div class="line">    <span class="keyword">while</span>(p&amp;&amp;!ch[p][x])</div><div class="line">        ch[p][x]=np,p=fa[p];</div><div class="line">    <span class="keyword">if</span>(!p)</div><div class="line">        fa[np] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> q = ch[p][x];</div><div class="line">        <span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)</div><div class="line">            fa[np] = q;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> nq = ++cnt;</div><div class="line">            len[nq] = len[p]+<span class="number">1</span>;</div><div class="line">            memmove(ch[nq],ch[q],<span class="keyword">sizeof</span>(ch[nq]));</div><div class="line">            fa[nq] = fa[q];</div><div class="line">            fa[np] = fa[q] = nq;</div><div class="line">            <span class="keyword">while</span>(ch[p][x] == q)</div><div class="line">            &#123;</div><div class="line">            ch[p][x] = nq;</div><div class="line">            p = fa[p];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>于是sam就建好啦，艹。我也不知道为什么，等我知道了在回来补吧。</p><p>其实sam建出来的树相当于将节点个数压缩到O(n)的tire树，这颗tire树储存了一个字符串所有后缀，每条路劲都代表一个子串</p><p>right集合上面说过了就不说了</p><h3 id="据说是重点："><a href="#据说是重点：" class="headerlink" title="据说是重点："></a>据说是重点：</h3><p>节点x的后缀链接fa(x):right(x)$\subset$right(u),fa(x)是u中right最小的一个</p><p>后缀链接组成了一颗后缀链接树（not 后缀树）。后缀链接树的根为起点。若节点y的right集合包含了节点的right集合，则y再后缀链接树上是x的祖先</p><p>一个节点的right结合等于他再后缀链接树上的所有儿子的right集合的并集。而且儿子的right集合之间两两没有交集。</p><p>每个节点能表达的子串长度是一段连续的区间。</p><blockquote><p>比如aaabaab，节点b(4,7)表达的是b，ab，aab三个，他的儿子有两个(4)只能表示aaab （7）能表示baab，abaab，aabaab，aaabaaab。</p></blockquote><p>所有本质不同的子串数量等于$\sum$len(x)-len(fa(x))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;陈立杰后缀自动机讲稿笔记&quot;&gt;&lt;a href=&quot;#陈立杰后缀自动机讲稿笔记&quot; class=&quot;headerlink&quot; title=&quot;陈立杰后缀自动机讲稿笔记&quot;&gt;&lt;/a&gt;陈立杰后缀自动机讲稿笔记&lt;/h1&gt;&lt;p&gt;trans(s,ch) 当前状态为s，读入&lt;strong&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>8.7总结</title>
    <link href="http://yoursite.com/2019/08/07/8.7/"/>
    <id>http://yoursite.com/2019/08/07/8.7/</id>
    <published>2019-08-06T16:19:04.000Z</published>
    <updated>2019-09-12T05:45:11.750Z</updated>
    
    <content type="html"><![CDATA[<p>###牛客多校4 C  单调栈+线段树</p><p>ans=max（ans，0）直接写了ans = 0；</p><p>线段树区间范围没找好</p><p>用cin又超时了</p><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###牛客多校4 C  单调栈+线段树&lt;/p&gt;
&lt;p&gt;ans=max（ans，0）直接写了ans = 0；&lt;/p&gt;
&lt;p&gt;线段树区间范围没找好&lt;/p&gt;
&lt;p&gt;用cin又超时了&lt;/p&gt;
&lt;h3 id=&quot;线性基&quot;&gt;&lt;a href=&quot;#线性基&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>8.5</title>
    <link href="http://yoursite.com/2019/08/06/8-5/"/>
    <id>http://yoursite.com/2019/08/06/8-5/</id>
    <published>2019-08-06T00:25:11.000Z</published>
    <updated>2019-08-06T00:25:48.438Z</updated>
    
    <content type="html"><![CDATA[<p>总结（x） 反思（√）</p><p>poj2728 </p><p>裸的斜率优化生成树</p><p>sb题竟然花了我接近两个小时？？？？</p><p>1000个点的完全图我竟然去写了个链式向前星？？？睿智行为</p><p>链式向前星+堆优化的prim怎么写样例怎么跑不过？？？</p><p>最后邻接矩阵+普通prim一发就过了，真的是日了狗</p><p>一开始写二分竟然睿智地写了 l=mid+1 而且还完全没觉得自己有问题。果然睡眠不足会导致人变蠢。</p><p>01分数规划除了二分还有一个迭代写法，无法证明复杂度姑且认为复杂度差不多，但据说迭代法有的情况不一定能用。</p><p>poj3621</p><p>这个傻逼题又花了我一个半小时？？？艹</p><p>二分x，用spfa判断负环</p><p>看见1000个点直接用了邻接矩阵，但是有的边不存在导致一堆bug，最后又改回了链式向前星。（果然建图要灵活取舍）</p><p>中间样例一直跑不过，搞了快半小时发现看错题了，是一个有向图，我写成无向图了。</p><p>改完之后样例跑过了，然后一交还是wa，后来对着别人代码改，发现时自带的abs不行，自己写了个myabs就过了？？？？？？什么玩意？？？？？</p><p>codeforce #577（div）c</p><p>傻逼题，又傻逼了，没考虑中间跳出时的一种情况</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结（x） 反思（√）&lt;/p&gt;
&lt;p&gt;poj2728 &lt;/p&gt;
&lt;p&gt;裸的斜率优化生成树&lt;/p&gt;
&lt;p&gt;sb题竟然花了我接近两个小时？？？？&lt;/p&gt;
&lt;p&gt;1000个点的完全图我竟然去写了个链式向前星？？？睿智行为&lt;/p&gt;
&lt;p&gt;链式向前星+堆优化的prim怎么写样例怎么跑
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>8.6总结</title>
    <link href="http://yoursite.com/2019/08/06/8.6/"/>
    <id>http://yoursite.com/2019/08/06/8.6/</id>
    <published>2019-08-05T16:19:04.000Z</published>
    <updated>2019-09-12T05:44:59.941Z</updated>
    
    <content type="html"><![CDATA[<p>学了下后缀自动机，出了下数据</p><p>写了一个带修莫队套权值线段树处理</p><p>线段树写了个update（1，mid，pos&lt;&lt;1,x,d）一直每看出来，傻逼</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学了下后缀自动机，出了下数据&lt;/p&gt;
&lt;p&gt;写了一个带修莫队套权值线段树处理&lt;/p&gt;
&lt;p&gt;线段树写了个update（1，mid，pos&amp;lt;&amp;lt;1,x,d）一直每看出来，傻逼&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>8.4总结</title>
    <link href="http://yoursite.com/2019/08/05/8-4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/05/8-4总结/</id>
    <published>2019-08-04T16:19:04.000Z</published>
    <updated>2019-08-04T16:20:35.050Z</updated>
    
    <content type="html"><![CDATA[<p>淀粉质<br>poj1741</p><p>淀粉质水题，套个板子就过了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[N];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edg</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> v,w,nxt;</div><div class="line">&#125;e[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    e[cnt].v = v;</div><div class="line">    e[cnt].w = w;</div><div class="line">    e[cnt].nxt = head[u];</div><div class="line">    head[u] = cnt++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> sz[N],vis[N],mx,size,son[N],rt;</div><div class="line">ll d[N],q[N],l,r;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findrt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    sz[u] = <span class="number">1</span>,son[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].v;</div><div class="line">        <span class="keyword">if</span>(vis[v]||v==fa)<span class="keyword">continue</span>;</div><div class="line">        findrt(v,u);</div><div class="line">        sz[u]+=sz[v];</div><div class="line">        <span class="keyword">if</span>(sz[v]&gt;son[u])</div><div class="line">            son[u]=sz[v];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(size-sz[u]&gt;son[u])</div><div class="line">        son[u]=size-sz[u];</div><div class="line">    <span class="keyword">if</span>(son[u]&lt;mx)</div><div class="line">        mx=son[u],rt = u;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    q[++r]=d[u];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].v;</div><div class="line">        <span class="keyword">if</span>(v==fa||vis[v])<span class="keyword">continue</span>;</div><div class="line">        d[v]=d[u]+e[i].w;</div><div class="line">        getdis(v,u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    r = <span class="number">0</span>;</div><div class="line">    d[u] = val;</div><div class="line">    getdis(u,<span class="number">0</span>);</div><div class="line">    ll sum=<span class="number">0</span>;l=<span class="number">1</span>;</div><div class="line">    sort(q+<span class="number">1</span>,q+r+<span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span>(l&lt;r)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(q[l]+q[r]&lt;=m)</div><div class="line">            sum+=r-l,++l;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            --r;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line">ll ans=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ans+=calc(u,<span class="number">0</span>);</div><div class="line">    vis[u]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].v;</div><div class="line">        <span class="keyword">if</span>(vis[v])<span class="keyword">continue</span>;</div><div class="line">        ans -= calc(v,e[i].w);</div><div class="line">        size=sz[v];</div><div class="line">        mx = inf;</div><div class="line">        findrt(v,<span class="number">0</span>);</div><div class="line">        dfs(rt);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m,n&amp;&amp;m)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">        <span class="built_in">memset</span>(sz,<span class="number">0</span>,<span class="keyword">sizeof</span>(sz));</div><div class="line">        <span class="built_in">memset</span>(son,<span class="number">0</span>,<span class="keyword">sizeof</span>(son));</div><div class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        cnt=ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> u,v,w;<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            addedge(u,v,w);</div><div class="line">            addedge(v,u,w);</div><div class="line">        &#125;</div><div class="line">        size = n;</div><div class="line">        mx = inf;</div><div class="line">        findrt(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        dfs(rt);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>bzoj2152</p><p>也是水题，没什么好说的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">n</span>)</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    T X=<span class="number">0</span>,w=<span class="number">1</span>;<span class="keyword">char</span> ch = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span> ||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> &amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;X = (X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    n = X*w;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span> b?gcd(b,a%b):a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> head[N];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> v,w,nxt;</div><div class="line">&#125;e[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    e[cnt].v = v;</div><div class="line">    e[cnt].w = w;</div><div class="line">    e[cnt].nxt = head[u];</div><div class="line">    head[u] = cnt++;  </div><div class="line">    e[cnt].v = u;</div><div class="line">    e[cnt].w = w;</div><div class="line">    e[cnt].nxt = head[v];</div><div class="line">    head[v] = cnt++;  </div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> sz[N],vis[N],mx,size,son[N],root;</div><div class="line">ll dis[N],q[N],l,r,ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(dis));</div><div class="line">    <span class="built_in">memset</span>(sz,<span class="number">0</span>,<span class="keyword">sizeof</span>(sz));</div><div class="line">    <span class="built_in">memset</span>(son,<span class="number">0</span>,<span class="keyword">sizeof</span>(son));</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    cnt=ans=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findrt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    sz[u] = <span class="number">1</span>,son[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].v;</div><div class="line">        <span class="keyword">if</span>(vis[v]||v==fa)<span class="keyword">continue</span>;</div><div class="line">        findrt(v,u);</div><div class="line">        sz[u]+=sz[v];</div><div class="line">        <span class="keyword">if</span>(sz[v]&gt;son[u])</div><div class="line">            son[u]=sz[v];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(size-sz[u]&gt;son[u])</div><div class="line">        son[u]=size-sz[u];</div><div class="line">    <span class="keyword">if</span>(son[u]&lt;mx)</div><div class="line">        mx = son[u],root = u;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    q[dis[u]%<span class="number">3</span>]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].v;</div><div class="line">        <span class="keyword">if</span>(v==fa||vis[v])<span class="keyword">continue</span>;</div><div class="line">        dis[v] = dis[u]+e[i].w;</div><div class="line">        getdis(v,u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    q[<span class="number">0</span>]=q[<span class="number">1</span>]=q[<span class="number">2</span>]=<span class="number">0</span>;</div><div class="line">    dis[u] = val;</div><div class="line">    <span class="comment">//q[dis[u]%3]++;</span></div><div class="line">    getdis(u,<span class="number">0</span>);</div><div class="line">    ll sum=<span class="number">0</span>;</div><div class="line">    sum+=<span class="number">1l</span>l*q[<span class="number">0</span>]*(q[<span class="number">0</span>]<span class="number">-1</span>)/<span class="number">2</span>+q[<span class="number">1</span>]*q[<span class="number">2</span>];</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//cout&lt;&lt;" "&lt;&lt;u&lt;&lt;endl;</span></div><div class="line"><span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></div><div class="line">    ans+=calc(u,<span class="number">0</span>);</div><div class="line">    <span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></div><div class="line">    vis[u]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> totsz = size;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=e[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v = e[i].v;</div><div class="line">        <span class="keyword">if</span>(vis[v])<span class="keyword">continue</span>;</div><div class="line">        ans -= calc(v,e[i].w);</div><div class="line">        size=sz[v]&gt;sz[u]?totsz-sz[u]:sz[v];</div><div class="line">        <span class="comment">//size=sz[v];</span></div><div class="line">mx = inf;</div><div class="line">        findrt(v,<span class="number">0</span>);</div><div class="line">        dfs(root);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//cout&lt;&lt;" "&lt;&lt;u&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> u,v,w;<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            addedge(u,v,w);</div><div class="line">        &#125;</div><div class="line">        size = n;</div><div class="line">        mx = inf;</div><div class="line">        findrt(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        dfs(root);</div><div class="line">       ans=ans*<span class="number">2</span>+n;</div><div class="line">ll gs = gcd(n*n,ans);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,ans/gs,<span class="number">1l</span>l*n*n/gs);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>补题：</p><p>牛客第二场A</p><p>打表找规律，每个点概率都是$\frac{1}{n-1}$,其实想一想觉得很有道理，瞎鸡儿走走到最后只剩一个点，每个点都有可能是最后一个点（除了起点），所以一个点是最后一个点的概率为$\frac{1}{n-1}$</p><p>注意题目要求每个答案要乘以之前的答案，原因不明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">ll ret=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(b)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=(ret*a)%mod;</div><div class="line">a=(a*a)%mod;</div><div class="line">b&gt;&gt;=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">ll ans=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(T--)</div><div class="line">&#123;</div><div class="line">ll a,b;<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)</div><div class="line">ans*=<span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">0</span>)</div><div class="line">ans*=<span class="number">0</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">ans=qpow(a<span class="number">-1</span>,mod<span class="number">-2</span>)*ans%mod;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>B</p><p>易得</p><p>dp[i] = $\frac{1}{k}$(dp[i-1]+dp[i-2]+….+dp[max(i-k,0)])</p><p>矩阵快速幂能做复杂度O($Tk^2logN$ )，5s应该t不了</p><p>这里学会了套BM，复杂度不知道多少，看代码大概也是logN</p><p>网上的傻逼博客基本都是对着抄的，基本只有一句8项就能推后面的，然而8项是不够的，递推式有多少项就至少开这个数的两倍。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</div><div class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll a,ll b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ll res=<span class="number">1</span>;</div><div class="line">    a%=mod;</div><div class="line">    assert(b&gt;=<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(; b; b&gt;&gt;=<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;</div><div class="line">        a=a*a%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line">ll _,n;</div><div class="line"><span class="keyword">namespace</span> linear_seq</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20010</span>;</div><div class="line">    ll res[N],base[N],_c[N],_md[N];</div><div class="line">    <span class="built_in">vector</span>&lt;ll&gt; Md;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,<span class="keyword">int</span> k)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        rep(i,<span class="number">0</span>,k+k) _c[i]=<span class="number">0</span>;</div><div class="line">        rep(i,<span class="number">0</span>,k) <span class="keyword">if</span> (a[i]) rep(j,<span class="number">0</span>,k) _c[i+j]=(_c[i+j]+a[i]*b[j])%mod;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=k+k<span class="number">-1</span>; i&gt;=k; i--) <span class="keyword">if</span> (_c[i])</div><div class="line">                rep(j,<span class="number">0</span>,SZ(Md)) _c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod;</div><div class="line">        rep(i,<span class="number">0</span>,k) a[i]=_c[i];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n,VI a,VI b)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        ll ans=<span class="number">0</span>,pnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> k=SZ(a);</div><div class="line">        assert(SZ(a)==SZ(b));</div><div class="line">        rep(i,<span class="number">0</span>,k) _md[k<span class="number">-1</span>-i]=-a[i];</div><div class="line">        _md[k]=<span class="number">1</span>;</div><div class="line">        Md.clear();</div><div class="line">        rep(i,<span class="number">0</span>,k) <span class="keyword">if</span> (_md[i]!=<span class="number">0</span>) Md.push_back(i);</div><div class="line">        rep(i,<span class="number">0</span>,k) res[i]=base[i]=<span class="number">0</span>;</div><div class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> ((<span class="number">1l</span>l&lt;&lt;pnt)&lt;=n) pnt++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p=pnt; p&gt;=<span class="number">0</span>; p--)</div><div class="line">        &#123;</div><div class="line">            mul(res,res,k);</div><div class="line">            <span class="keyword">if</span> ((n&gt;&gt;p)&amp;<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=k<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) res[i+<span class="number">1</span>]=res[i];</div><div class="line">                res[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">                rep(j,<span class="number">0</span>,SZ(Md)) res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        rep(i,<span class="number">0</span>,k) ans=(ans+res[i]*b[i])%mod;</div><div class="line">        <span class="keyword">if</span> (ans&lt;<span class="number">0</span>) ans+=mod;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        VI C(1,1),B(1,1);</div><div class="line">        <span class="keyword">int</span> L=<span class="number">0</span>,m=<span class="number">1</span>,b=<span class="number">1</span>;</div><div class="line">        rep(n,<span class="number">0</span>,SZ(s))</div><div class="line">        &#123;</div><div class="line">            ll d=<span class="number">0</span>;</div><div class="line">            rep(i,<span class="number">0</span>,L+<span class="number">1</span>) d=(d+(ll)C[i]*s[n-i])%mod;</div><div class="line">            <span class="keyword">if</span> (d==<span class="number">0</span>) ++m;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span>*L&lt;=n)</div><div class="line">            &#123;</div><div class="line">                VI T=C;</div><div class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</div><div class="line">                <span class="keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="number">0</span>);</div><div class="line">                rep(i,<span class="number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;</div><div class="line">                L=n+<span class="number">1</span>-L;</div><div class="line">                B=T;</div><div class="line">                b=d;</div><div class="line">                m=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</div><div class="line">                <span class="keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="number">0</span>);</div><div class="line">                rep(i,<span class="number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;</div><div class="line">                ++m;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> C;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(VI a,ll n)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        VI c=BM(a);</div><div class="line">        c.erase(c.begin());</div><div class="line">        rep(i,<span class="number">0</span>,SZ(c)) c[i]=(mod-c[i])%mod;</div><div class="line">        <span class="keyword">return</span> solve(n,c,VI(a.begin(),a.begin()+SZ(c)));</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">ll f[<span class="number">2050</span>];</div><div class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ll ret=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret=(a*ret)%mod;</div><div class="line">        a=(a*a)%mod;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        ll n,m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">if</span>(m==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">2</span>*qpow(n+<span class="number">1</span>,mod<span class="number">-2</span>)%mod);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        f[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</div><div class="line">        &#123;</div><div class="line">        f[i]=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n&amp;&amp;i-j&gt;=<span class="number">0</span>;j++)</div><div class="line">                f[i]=(f[i]+f[i-j])%mod;</div><div class="line">            f[i]=(f[i]*qpow(n,mod<span class="number">-2</span>))%mod;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//cout&lt;&lt;f[1]&lt;&lt;endl;</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</div><div class="line">        <span class="comment">//v.clear();</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>*n;i++)</div><div class="line">            v.push_back(f[i]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,linear_seq::gao(v,m)%mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>D</p><p>贪心，没什么好说的，标称用来int128来存状态，只有Linux能跑，说不出话。</p><p>用bitset存状态，对每个用biset来存相邻的点，对于每个团拓展这个点只要满足团里的点的bitset&amp;这个点相邻的点的bitset=团里的点的bitset 就说明了这个点与团里的点都相邻。</p><p>用优先队列维护bitset，每次取点权和最小的团，然后拓展，要求拓展点必须比团里点都大就可以避免重复，取到第k个就是第k小。复杂度O(knlogn) 看起来很大，其实是kn是取不满的，而且有时限两秒，问题不大。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">n</span>)</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    T X=<span class="number">0</span>,w=<span class="number">1</span>;<span class="keyword">char</span> ch = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span> ||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> &amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;X = (X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    n = X*w;</div><div class="line">&#125;</div><div class="line">ll wei[<span class="number">110</span>];</div><div class="line"><span class="built_in">bitset</span>&lt;105&gt; mp[<span class="number">110</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    ll w;</div><div class="line">    <span class="built_in">bitset</span>&lt;105&gt;sc;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;u)<span class="keyword">const</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> w&gt;u.w; </div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;node&gt;que;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,k;read(n);read(k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;wei[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> d;<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;d);</div><div class="line">            <span class="keyword">if</span>(d) mp[i][j]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    que.push(node&#123;wei[<span class="number">0</span>],<span class="number">0</span>&#125;);</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    for(int i=1;i&lt;=n;++i)</span></div><div class="line"><span class="comment">    &#123;</span></div><div class="line"><span class="comment">        bitset&lt;105&gt;ex;</span></div><div class="line"><span class="comment">        ex[i]=1;</span></div><div class="line"><span class="comment">        que.push(node&#123;wei[i],ex&#125;);</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">bool</span> sc=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!que.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">bitset</span>&lt;105&gt; u = que.top().sc;</div><div class="line">        ll ww = que.top().w;</div><div class="line">        que.pop();</div><div class="line">        k--;</div><div class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ww&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> last=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="keyword">if</span>(u[i])</div><div class="line">                last=i+<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=last;i&lt;=n;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(u[i]==<span class="number">1</span>)<span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>((mp[i]&amp;u)==u)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">bitset</span>&lt;105&gt; v = u;</div><div class="line">                v[i]=<span class="number">1</span>;</div><div class="line">                que.push(node&#123;ww+wei[i],v&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(sc==<span class="number">0</span>)</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>H</p><p>直接dp能卡过去，但其实能优化，主要是数据太弱的。优化什么的有缘再说吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> dp[N][N];</div><div class="line"><span class="keyword">int</span> biggest=<span class="number">-1</span>,bigger=<span class="number">-1</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;dp[i][j]);</div><div class="line">            dp[i][j]+=dp[i<span class="number">-1</span>][j]*dp[i][j];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> len = dp[i][j],dep=<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(len)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> ret =  len*dep;</div><div class="line">                <span class="keyword">if</span>(ret&gt;biggest)</div><div class="line">                &#123;</div><div class="line">                    bigger = biggest;</div><div class="line">                    biggest = ret;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ret&gt;bigger)</div><div class="line">                    bigger = ret;</div><div class="line">                len = min(len,dp[i][j-dep]);</div><div class="line">                dep++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(bigger==<span class="number">-1</span>)bigger=<span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,bigger);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从d题和第5场的某一题中总结到，在判断已知图中的点和某个点所有相邻点之间的是否全集关系时，可以用bitset处理，复杂度O（1）</p><p>今天浪费了很多时间，不知道在干什么，很简单的题花了很久才a出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;淀粉质&lt;br&gt;poj1741&lt;/p&gt;
&lt;p&gt;淀粉质水题，套个板子就过了&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5.9报告--莫队orz</title>
    <link href="http://yoursite.com/2019/05/09/5-9%E6%8A%A5%E5%91%8A-%E8%8E%AB%E9%98%9Forz/"/>
    <id>http://yoursite.com/2019/05/09/5-9报告-莫队orz/</id>
    <published>2019-05-09T13:37:35.000Z</published>
    <updated>2019-05-10T07:57:46.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/05/09/5-9报告-莫队orz/1.jpg" alt="我tm搜爆"><br>莫队就是一个暴力算法<br>他可以有效的处理离线区间问题<br>对于在线的区间问题还是得用主席树<br><a href="https://blog.csdn.net/Yuzzzzzz/article/details/90049453" target="_blank" rel="external">P2709</a><br>对于这道沙雕题，普通吸氧的速度还不如直接scanf快<br>但是也因此学会了吸氧的新姿势<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> _<span class="function">Tp <span class="title">read</span><span class="params">(_Tp&amp;x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> c11=getchar(),ob=<span class="number">0</span>;</div><div class="line">    x=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(c11^<span class="string">'-'</span>&amp;&amp;!<span class="built_in">isdigit</span>(c11))</div><div class="line">        c11=getchar();</div><div class="line">    <span class="keyword">if</span>(c11==<span class="string">'-'</span>)</div><div class="line">        c11=getchar(),ob=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c11))</div><div class="line">        x=x*<span class="number">10</span>+c11-<span class="string">'0'</span>,c11=getchar();</div><div class="line">    <span class="keyword">if</span>(ob)x=-x;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;b=read(a);&#125;</div></pre></td></tr></table></figure></p><p>这应该是除了fread外最快的方法了吧（求不要打脸）</p><p><a href="https://blog.csdn.net/Yuzzzzzz/article/details/90071256" target="_blank" rel="external">BZOJ2038</a><br>我认为这题数论成分更大？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/05/09/5-9报告-莫队orz/1.jpg&quot; alt=&quot;我tm搜爆&quot;&gt;&lt;br&gt;莫队就是一个暴力算法&lt;br&gt;他可以有效的处理离线区间问题&lt;br&gt;对于在线的区间问题还是得用主席树&lt;br&gt;&lt;a href=&quot;https://blog.csdn.n
      
    
    </summary>
    
    
      <category term="垃圾莫队，浪费我时间" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E8%8E%AB%E9%98%9F%EF%BC%8C%E6%B5%AA%E8%B4%B9%E6%88%91%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>2019.5.8</title>
    <link href="http://yoursite.com/2019/05/08/2019-5-8/"/>
    <id>http://yoursite.com/2019/05/08/2019-5-8/</id>
    <published>2019-05-08T08:22:47.000Z</published>
    <updated>2019-05-08T09:14:06.029Z</updated>
    
    <content type="html"><![CDATA[<p>今天又干了什么？<br>又写了一次BIT的b题，今天仍然是没过呢  </p><p><a href="https://github.com/Qwindplate/acm/blob/master/BIT%20B.cpp" target="_blank" rel="external">没过的垃圾代码</a></p><p>然后去看了一下主席树和树链剖分以及莫队算法</p><p><a href="https://blog.csdn.net/Yuzzzzzz/article/details/89955356" target="_blank" rel="external">hdoj3966</a></p><p>不要问我为什么没做莫队和主席树的题，我现在都没搞懂莫队算法</p><p>然后就是修了修电脑（哭）<br>垃圾数据库上机，配置mysql时new了系统环境，导致原来的Path全删了，今天才发现。<br> <img src="/2019/05/08/2019-5-8/timg.jpg" alt="艹!"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天又干了什么？&lt;br&gt;又写了一次BIT的b题，今天仍然是没过呢  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Qwindplate/acm/blob/master/BIT%20B.cpp&quot; target=&quot;_blank&quot; rel=&quot;extern
      
    
    </summary>
    
    
      <category term="报告吧" scheme="http://yoursite.com/tags/%E6%8A%A5%E5%91%8A%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>论如何建一个hexo</title>
    <link href="http://yoursite.com/2017/10/31/how-to-build-a-blog/"/>
    <id>http://yoursite.com/2017/10/31/how-to-build-a-blog/</id>
    <published>2017-10-31T13:57:49.945Z</published>
    <updated>2018-09-27T14:29:35.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建什么网页，放弃吧"><a href="#建什么网页，放弃吧" class="headerlink" title="建什么网页，放弃吧"></a>建什么网页，放弃吧</h1><h2 id="1-申请一个github账号-这东西不用教了吧"><a href="#1-申请一个github账号-这东西不用教了吧" class="headerlink" title="1.申请一个github账号(这东西不用教了吧)"></a>1.申请一个github账号(这东西不用教了吧)</h2><h2 id="2-下载git-和-node-js"><a href="#2-下载git-和-node-js" class="headerlink" title="2.下载git 和 node.js"></a>2.下载git 和 node.js</h2><h2 id="3-创建一个网页（等我下载了md再写）"><a href="#3-创建一个网页（等我下载了md再写）" class="headerlink" title="3.创建一个网页（等我下载了md再写）"></a>3.创建一个网页（等我下载了md再写）</h2><h2 id="4-在一个你喜欢的地方创建一个文件夹"><a href="#4-在一个你喜欢的地方创建一个文件夹" class="headerlink" title="4.在一个你喜欢的地方创建一个文件夹"></a>4.在一个你喜欢的地方创建一个文件夹</h2><h2 id="5-在桌面鼠标右键打开git-bash"><a href="#5-在桌面鼠标右键打开git-bash" class="headerlink" title="5.在桌面鼠标右键打开git bash"></a>5.在桌面鼠标右键打开git bash</h2><h2 id="6-在git里骚操作"><a href="#6-在git里骚操作" class="headerlink" title="6.在git里骚操作"></a>6.在git里骚操作</h2><p>   下载安装 hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli //正确的操作</div><div class="line">$ npm install -g npm --registry = https://registry.npm.taobao.org </div><div class="line">                             //淘宝NPM镜像，如果上面那个不行就用这个吧</div></pre></td></tr></table></figure></p><p>   保存 hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo --save</div><div class="line">// 安装完后可以输入命令检验安装</div><div class="line">$ hexo -v</div></pre></td></tr></table></figure></p><pre><code>初始化博客</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//初始化博客</div><div class="line">$ hexo init</div><div class="line">//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class="line">$ npm install</div><div class="line">//运行hexo</div><div class="line">$ hexo s -g</div><div class="line">//打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了</div><div class="line">//按住Ctrl+C键即可停止运行</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建什么网页，放弃吧&quot;&gt;&lt;a href=&quot;#建什么网页，放弃吧&quot; class=&quot;headerlink&quot; title=&quot;建什么网页，放弃吧&quot;&gt;&lt;/a&gt;建什么网页，放弃吧&lt;/h1&gt;&lt;h2 id=&quot;1-申请一个github账号-这东西不用教了吧&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://yoursite.com/2017/10/31/my-first-blog/"/>
    <id>http://yoursite.com/2017/10/31/my-first-blog/</id>
    <published>2017-10-31T09:31:55.000Z</published>
    <updated>2017-10-31T09:35:07.816Z</updated>
    
    <content type="html"><![CDATA[<p>#测试</p>]]></content>
    
    <summary type="html">
    
      测试
    
    </summary>
    
    
      <category term="没事干，很闲" scheme="http://yoursite.com/tags/%E6%B2%A1%E4%BA%8B%E5%B9%B2%EF%BC%8C%E5%BE%88%E9%97%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/28/hello-world/"/>
    <id>http://yoursite.com/2017/10/28/hello-world/</id>
    <published>2017-10-28T05:23:22.752Z</published>
    <updated>2017-10-28T05:23:22.752Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
